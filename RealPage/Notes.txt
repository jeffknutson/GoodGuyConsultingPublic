https://github.com/jeffknutson/GoodGuyConsultingPublic/blob/master/RealPage/Notes.txt


PowerShell
==========
Jeff Knutson
jeff@toptal.com
jeff@goodguyconsulting.com


How to change your error background colors in the PowerShell console: http://tinyurl.com/zh3hc66

Lab3
----
Get-Help and Get-Command are your friends

14.  A little help to filter the aliases down to a resonable size:
     Get-Alias -Definition "*process*"

Lab4
----
#3 hint -- Get-Command has "Noun" and "Verb" params...
           there is a different parameter you can use

Lab5
----
#1 hint Set-ItemProperty

#4 hint -- recursive


Lab6
----
#1 Compare-Object is the cmdlet we were using


Review 1-6  -- 145pm-245pm target
----------

#3 hint - use the Sort-Object cmdlet (get-help *sort*)

#6 hint - the > is the same as Out-File
   e.g. dir > files.txt  
           -- or --
        dir | Out-File .\files.txt

#7 We have not seen the Format-Custom cmdlet yet, so don't stress about that one

#9 hint - do a Get-Help ConvertTo-HTML to find a parameter to help satisify the 
          'Have the phrase "Installed services" displayed'

#16 hint - Get-Command -Verb *format* to help find the proper cmdlet to do output the "User Shell Folders"


Lab 7
-----
hint get-help *troubleshooting*


Example of loading the SQL Server Module
----------------------------------------
Import-Module “sqlps” -DisableNameChecking
ls
cd .\SQL\
ls
cd Morello      (NOTE: The name of my machine is Morello; enter your own machine name here)
ls
cd default
ls
cd Databases
ls
cd Tempo        (NOTE: I have a table named Tempo, but you could do this to your own tables here)
dir
cd Tables
dir
cd Roles
ls
Invoke-Sqlcmd "Select * from users"
Invoke-Sqlcmd "Select * from users" |format-table


Lab 8
-----
Get-Member 

Properties == Data
Methods == Actions

# this will get a list of all methods (i.e. Actions) on the System.Diagnostics.Process object
get-process | select -first 1 | get-member -MemberType methods

# this will get a list of all properties (i.e. Data) on the System.Diagnostics.Process object
get-process | select -first 1 | get-member -MemberType Properties


#4 hint - pipe your date into select-object 
        - ignore the rest of the business about "a table like this......"



$object = New-Object –TypeName PSObject
$object | Add-Member –MemberType NoteProperty –Name OSBuild –Value $os.BuildNumber
$object | Add-Member –MemberType NoteProperty –Name OSVersion –Value $os.Version
$object | Add-Member –MemberType NoteProperty –Name BIOSSerial –Value $bios.SerialNumber
Write-Output $object

Posh Parlor Tricks
------------------
Powershell can do math!
1GB / 1MB
8gb / .29MB  e.g. how many .29Mb files fit on an 8GB thumbdrive?


Powershell Day 2
================
Welcome back!

Our Notes file -- http://tinyurl.com/RealPosh

https://github.com/jeffknutson/GoodGuyConsultingPublic/blob/master/RealPage/Notes.txt

http://www.powershell.org

PowerShell Browser - http://www.PowerShellGallery.com (Thanks Sravan!)


Module 9 
--------

Using the ExpandProperty parameter of Selet-Object to get the value from a POSH objet
get-process | select -ExpandProperty ProcessName

Sending stuff to the clipboard is easy - just pipe it to Clip
e.g. get-process | select -ExpandProperty ProcessName | clip


Module 10 Lab
-------------
Book - starts on page 123

#1 hint - get-process | select -first 1 | get-member
          
          #to just get the properties of a process object (properties contain data)
          get-process | select -first 1 | Get-Member -MemberType Property 

          checkout the format-table cmdlet too for how to format
           
#2 hint - format-table works like select-object where you can create dynamic output columns
          e.g.   format-table @{l='myCustomColumnName';e={'myCustomColumnVlue'}

          get-process | format-table Id, Name, @{l='CPU Percentage';e={$_.CPU * 100}}

#3 hint - get-help *eventlog*
          also use, that same syntax from #2 to create custom expressions
          e.g. format-table @{Label='label',Expression={expression}}

          p.132 in the book has a small section explaining creating expressions -- 
          "Unlike Select-object, whose hash tables can accept only a Name and Expression key 
          (althought it will also accept N, L and Label for Name and E for Expression"



#4 hint - the format-table cmdlet has a parameter to help you do grouping


Lab 11 - Filtering
------------------
#1 - hint -- Import-Module is something we talked about later on day 1.
          -- it looks like get-netadapter has a built-in filtering parameter available
             so where-object would not necessairly be the first, best choice

#2 - hint -- same as #1 using import-module and builtin filtering

#4 - the answer key says this cannot be done, but it seems like there _is_ a StartType property
     available:

     get-service | select -first 1 | get-member -MemberType property

     you will probably need ot use the logical operator -and inside of your where-object

     Richard did get this to work using where-object  :) - thank you!
     Jason pointed out this is not possible just using the builtin filtering of get-service, which
     is likely what the question was asking.  Thanks!

#5 - where-object is going to be useful on this one

other stuff from this lab:
- We started talking about finding hotfixes installed this year

# the InstallDate/InstalledOn are strings, which we see here:
get-hotfix | select -first 1 | get-member


get-hotfix | where-object {[datetime]::parse($_.InstalledOn).year -eq 2017}


then I got curious at lunch about the InstalledOn ScriptProperty, which resulted in this:

This script below, gets the code for the InstalledOn ScriptProperty
get-hotfix | select -first 1 | get-member -MemberType ScriptProperty | 
             select -first 1 | select -expandproperty definition




Niggles
-------
This is how to set the window title in PowerShell.  It can be useful if
you have multiple PowerShell command prompts open.

$host.UI.RawUI.WindowTitle = "tasks"


how to call a command 10 times
PS E:\> 1..10 | foreach { Write-host "Hello # $_" }
Hello # 1
Hello # 2
Hello # 3
Hello # 4
Hello # 5
Hello # 6
Hello # 7
Hello # 8
Hello # 9
Hello # 10
PS E:\>





Lab 12 - "A Practical Interlude"
- SMBShare module 
- commands on SMBShare 
- dump the share to console

- to get your local computername
$env:COMPUTERNAME

 "$env:computername\Administrators"


PowerShell on other platforms (googleable of course)
https://www.github.com/PowerShell/PowerShell
- Win *
- Ubuntu 14.04, 16.04
- CentOS 7
- MacOS 10.11
- Docker
- others....

Lab 13 - Powershell Remoting
- uses WinRM
- to enable a server, use the Enable-PSRemoting commandlet
- Enter-PSSession -ComputerName <todo your remote computer name>
- It is not GUI, so running GUI commands will not show anything
- type Exit to leave the remote session
- The Invoke-Command cmdlet has a lot of examples of how to call remote servers, passing it scripts to run

#3 - Invoke-Command help example #5 shows how to call multiple computers

#4 - Invoke-Command help example #11 shows how to get computers from a local file


Module 14 - WMI
---------------

One way to save off the WMI classes to make searching for the names easier:
Get-WmiObject -List | Out-File .\wmiClasses.txt
notepad .\wmiClasses.txt



#3 hint - Win32_QuickFixEngineering

More Niggles
------------
- open windows explorer directly from powershell command prompt to the current folder
invoke-item .   
  -or-
ii .



Review 1-14 labs 


End of Day 2 -- Tomorrow we start on module 15, Background tasks/jobs!

